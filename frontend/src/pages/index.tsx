import type { NextPage } from "next";
import Head from "next/head";
import React from "react";
import ResultCarousel from "../components/ResultCarousel";
import { useQuery } from "react-query";
import SolidButton from "../components/SolidButton";
import axios from "axios";
import type { FormEvent } from "react"
import Vials from "../components/Vials";
import type { Vial } from "../../typings";
import { usePrepareContractWrite, useContractWrite, useWaitForTransaction } from "wagmi";
import vialContractInfo from "../../../contracts/abi/vialNFT.json";

const Home: NextPage = () => {

  const [vialToBurn, setVialToBurn] = React.useState<Vial | undefined>(undefined);

  const fetchImages = async () => {
    const res = await axios.get('http://localhost:3001/diffemon');
    return res.data;
  }

  const { data: images, refetch } = useQuery(['images'], fetchImages, {
    enabled: false
  });

  const { config } = usePrepareContractWrite({
    addressOrName: vialContractInfo.address,
    contractInterface: vialContractInfo.abi,
    functionName: 'burnVial',
    args: [vialToBurn?.tokenId],
    onSuccess(data) {
      console.log('Success', data)
    },
    onError(error) {
      console.log('Error', error)
    }
  })

  const { data, writeAsync: burnVial, isLoading: isBrewing } = useContractWrite({
    ...config,
    enabled: !!vialToBurn,
    onSuccess(data) {
      refetch()
      console.log('Success', data)
    },
    onError(error) {
      console.log('Error', error)
    }
  })

  const { isSuccess, isLoading } = useWaitForTransaction({
    hash: data?.hash,
  })

  const onSubmit = async (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault()
    if (e.currentTarget.prompt.value && vialToBurn) {
      await burnVial?.()
      setVialToBurn(undefined)
    }
  }

  const selectVialModal = (
    <>
      <input type="checkbox" id="select-vial-modal" className="modal-toggle" />
      <div className="modal">
        <div className="w-1/3 h-1/3">
          <label htmlFor="select-vial-modal" className="font-pixel text-2xl text-white cursor-pointer"
            onClick={() => setVialToBurn(undefined)}>X</label>
          <div className="bg-white bg-opacity-50 backdrop-blur-xl p-8">
            <div className="grid grid-cols-4 p-2 gap-4">
              <Vials setVialToBurn={setVialToBurn} vialToBurn={vialToBurn} />
            </div>
            <div className="flex justify-end">
              <label htmlFor="select-vial-modal"
                className="p-2 border-acid border-2 w-fit font-pixel text-lg text-white cursor-pointer">Select</label>
            </div>
          </div>
        </div>
      </div>
    </>
  )

  return (
    <>
      <Head>
        <title>UnstableLabs</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/flask.png" />
      </Head>
      <main className="container mx-auto w-4/5 p-10">
        {selectVialModal}
        <div className="mt-4 relative ">
          <img src="/lab-top.png" alt="lab-top" className="w-full" />
          <div className="w-full absolute bg-black bottom-1/2 ">
            <p className="font-pixel font-bold text-3xl text-white text-center">Welcome to <span className="text-acid">Unstable</span>Labs!</p>
            <p className="font-pixel font-bold text-lg text-gray-400 text-center">a lab to brew AI-generated NFTs</p>
          </div>
        </div>
        <div className="flex mt-10 justify-center items-center ">
          <p className="font-pixel font-bold text-3xl text-white">Step into the Brewery</p>
        </div>
        <img src="/brewery-animated.gif" className="w-72 mx-auto mt-16" />
        <div className="bg-gray-400 p-6 w-2/3 mx-auto mt-16 row-start-3 col-start-3">
          <form className="flex space-x-5 items-center" onSubmit={(e) => onSubmit(e)}>
            <label htmlFor="select-vial-modal" className="cursor-pointer" >
              <div className="h-12 w-12 border-2 border-acid bg-white">
                {vialToBurn && <img src={vialToBurn.image} alt="vial" className="p-1 h-12 w-12 object-contain" />}
              </div>
            </label>
            <input type="text" id="prompt" className="w-full p-4 placeholder:font-pixel text-black outline-none font-pixel" required placeholder="Enter your description" />
            <SolidButton text="Brew" loading={isBrewing} isFinished={isSuccess} />
          </form>
          {!vialToBurn && <p className="pt-2 font-pixel text-[0.6rem] text-red-500">Please select a vial to start</p>}
        </div>
        {isLoading && <div className="flex justify-center mt-8">
          <img src="/flask-combining.gif" alt="loading" className="w-64" />
        </div>}
        {images && <div className="w-full mt-24">
          <ResultCarousel images={images} />
        </div>}
        <div className="mt-24 flex space-x-4">
          <img src="/barrel-toxic.gif" alt="barrel" className="w-24" />
          <img src="/barrels.png" alt="barrels" className="w-56" />
          <img src="/pc-animated.gif" alt="barrels" className="w-48" />
        </div>
      </main>
    </>
  );
};

export default Home;

